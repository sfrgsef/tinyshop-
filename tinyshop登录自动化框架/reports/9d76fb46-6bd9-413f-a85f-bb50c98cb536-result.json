{"name": "test_login[textq@q.com-abc123-False]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff6a6f0cda5+78885]\n\tGetHandleVerifier [0x0x7ff6a6f0ce00+78976]\n\t(No symbol) [0x0x7ff6a6cc9bca]\n\t(No symbol) [0x0x7ff6a6d20766]\n\t(No symbol) [0x0x7ff6a6d20a1c]\n\t(No symbol) [0x0x7ff6a6d74467]\n\t(No symbol) [0x0x7ff6a6d48bcf]\n\t(No symbol) [0x0x7ff6a6d7122f]\n\t(No symbol) [0x0x7ff6a6d48963]\n\t(No symbol) [0x0x7ff6a6d116b1]\n\t(No symbol) [0x0x7ff6a6d12443]\n\tGetHandleVerifier [0x0x7ff6a71e4eed+3061101]\n\tGetHandleVerifier [0x0x7ff6a71df33d+3037629]\n\tGetHandleVerifier [0x0x7ff6a71fe592+3165202]\n\tGetHandleVerifier [0x0x7ff6a6f2730e+186766]\n\tGetHandleVerifier [0x0x7ff6a6f2eb3f+217535]\n\tGetHandleVerifier [0x0x7ff6a6f159b4+114740]\n\tGetHandleVerifier [0x0x7ff6a6f15b69+115177]\n\tGetHandleVerifier [0x0x7ff6a6efc368+10728]\n\tBaseThreadInitThunk [0x0x7ffe7a7553e0+16]\n\tRtlUserThreadStart [0x0x7ffe7b70485b+43]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"11b2bd52c4148a66db9eac37aba989a6\")>\naccount = 'textq@q.com', password = 'abc123', should_pass = False\n\n    @pytest.mark.parametrize(\"account,password,should_pass\", valid_cases)\n    def test_login(driver, account, password, should_pass):\n        \"\"\"\n        登录功能自动化测试\n        :param driver: 浏览器驱动\n        :param account: 测试账号\n        :param password: 测试密码\n        :param should_pass: 是否应登录成功\n        \"\"\"\n        login = LoginPage(driver)\n        user_center = UserCenterPage(driver)\n        login.open(LOGIN_URL)\n>       login.input_account(account)\n\ntestcases\\test_login.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:17: in input_account\n    wait_for_element(self.driver, By.ID, \"account\").clear()\nutils\\helper.py:14: in wait_for_element\n    return WebDriverWait(driver, timeout).until(EC.presence_of_element_located((by, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"11b2bd52c4148a66db9eac37aba989a6\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000025B465C3820>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6a6f0cda5+78885]\nE       \tGetHandleVerifier [0x0x7ff6a6f0ce00+78976]\nE       \t(No symbol) [0x0x7ff6a6cc9bca]\nE       \t(No symbol) [0x0x7ff6a6d20766]\nE       \t(No symbol) [0x0x7ff6a6d20a1c]\nE       \t(No symbol) [0x0x7ff6a6d74467]\nE       \t(No symbol) [0x0x7ff6a6d48bcf]\nE       \t(No symbol) [0x0x7ff6a6d7122f]\nE       \t(No symbol) [0x0x7ff6a6d48963]\nE       \t(No symbol) [0x0x7ff6a6d116b1]\nE       \t(No symbol) [0x0x7ff6a6d12443]\nE       \tGetHandleVerifier [0x0x7ff6a71e4eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff6a71df33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff6a71fe592+3165202]\nE       \tGetHandleVerifier [0x0x7ff6a6f2730e+186766]\nE       \tGetHandleVerifier [0x0x7ff6a6f2eb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff6a6f159b4+114740]\nE       \tGetHandleVerifier [0x0x7ff6a6f15b69+115177]\nE       \tGetHandleVerifier [0x0x7ff6a6efc368+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe7a7553e0+16]\nE       \tRtlUserThreadStart [0x0x7ffe7b70485b+43]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "\n    登录功能自动化测试\n    :param driver: 浏览器驱动\n    :param account: 测试账号\n    :param password: 测试密码\n    :param should_pass: 是否应登录成功\n    ", "parameters": [{"name": "account", "value": "'textq@q.com'"}, {"name": "password", "value": "'abc123'"}, {"name": "should_pass", "value": "False"}], "start": 1751457126696, "stop": 1751457137303, "uuid": "e54eadb0-179a-4696-bdf3-d231860aef9a", "historyId": "917b40b1d8fa32c66b71310d6e93c9ea", "testCaseId": "69c09a16f23890ca557733ad87499d37", "fullName": "testcases.test_login#test_login", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "DESKTOP-CGD749C"}, {"name": "thread", "value": "36008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_login"}]}