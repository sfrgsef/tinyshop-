{"name": "test_login[textq@q.com-abc123-False]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: unable to send message to renderer\n  (Session info: chrome=137.0.7151.122)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7b6a2cda5+78885]\n\tGetHandleVerifier [0x0x7ff7b6a2ce00+78976]\n\t(No symbol) [0x0x7ff7b67e9bca]\n\t(No symbol) [0x0x7ff7b67d5fd1]\n\t(No symbol) [0x0x7ff7b67d5f3c]\n\t(No symbol) [0x0x7ff7b67d46d3]\n\t(No symbol) [0x0x7ff7b67d538f]\n\t(No symbol) [0x0x7ff7b67ef131]\n\t(No symbol) [0x0x7ff7b67efc27]\n\t(No symbol) [0x0x7ff7b67f460c]\n\t(No symbol) [0x0x7ff7b67f46df]\n\t(No symbol) [0x0x7ff7b6840017]\n\t(No symbol) [0x0x7ff7b6840a1c]\n\t(No symbol) [0x0x7ff7b6894467]\n\t(No symbol) [0x0x7ff7b6868bcf]\n\t(No symbol) [0x0x7ff7b689122f]\n\t(No symbol) [0x0x7ff7b6868963]\n\t(No symbol) [0x0x7ff7b68316b1]\n\t(No symbol) [0x0x7ff7b6832443]\n\tGetHandleVerifier [0x0x7ff7b6d04eed+3061101]\n\tGetHandleVerifier [0x0x7ff7b6cff33d+3037629]\n\tGetHandleVerifier [0x0x7ff7b6d1e592+3165202]\n\tGetHandleVerifier [0x0x7ff7b6a4730e+186766]\n\tGetHandleVerifier [0x0x7ff7b6a4eb3f+217535]\n\tGetHandleVerifier [0x0x7ff7b6a359b4+114740]\n\tGetHandleVerifier [0x0x7ff7b6a35b69+115177]\n\tGetHandleVerifier [0x0x7ff7b6a1c368+10728]\n\tBaseThreadInitThunk [0x0x7ffe7a7553e0+16]\n\tRtlUserThreadStart [0x0x7ffe7b70485b+43]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"384eab5e5029e2d859f486d960237038\")>\naccount = 'textq@q.com', password = 'abc123', should_pass = False\n\n    @pytest.mark.parametrize(\"account,password,should_pass\", valid_cases)\n    def test_login(driver, account, password, should_pass):\n        \"\"\"\n        登录功能自动化测试\n        :param driver: 浏览器驱动\n        :param account: 测试账号\n        :param password: 测试密码\n        :param should_pass: 是否应登录成功\n        \"\"\"\n        login = LoginPage(driver)\n        user_center = UserCenterPage(driver)\n        login.open(LOGIN_URL)\n>       login.input_account(account)\n\ntestcases\\test_login.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:17: in input_account\n    wait_for_element(self.driver, By.ID, \"account\").clear()\nutils\\helper.py:14: in wait_for_element\n    return WebDriverWait(driver, timeout).until(EC.presence_of_element_located((by, value)))\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:104: in _predicate\n    return driver.find_element(*locator)\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A092153F70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff7b6a1c368+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe7a7553e0+16]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe7b70485b+43]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: unable to send message to renderer\nE         (Session info: chrome=137.0.7151.122)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7b6a2cda5+78885]\nE       \tGetHandleVerifier [0x0x7ff7b6a2ce00+78976]\nE       \t(No symbol) [0x0x7ff7b67e9bca]\nE       \t(No symbol) [0x0x7ff7b67d5fd1]\nE       \t(No symbol) [0x0x7ff7b67d5f3c]\nE       \t(No symbol) [0x0x7ff7b67d46d3]\nE       \t(No symbol) [0x0x7ff7b67d538f]\nE       \t(No symbol) [0x0x7ff7b67ef131]\nE       \t(No symbol) [0x0x7ff7b67efc27]\nE       \t(No symbol) [0x0x7ff7b67f460c]\nE       \t(No symbol) [0x0x7ff7b67f46df]\nE       \t(No symbol) [0x0x7ff7b6840017]\nE       \t(No symbol) [0x0x7ff7b6840a1c]\nE       \t(No symbol) [0x0x7ff7b6894467]\nE       \t(No symbol) [0x0x7ff7b6868bcf]\nE       \t(No symbol) [0x0x7ff7b689122f]\nE       \t(No symbol) [0x0x7ff7b6868963]\nE       \t(No symbol) [0x0x7ff7b68316b1]\nE       \t(No symbol) [0x0x7ff7b6832443]\nE       \tGetHandleVerifier [0x0x7ff7b6d04eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff7b6cff33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff7b6d1e592+3165202]\nE       \tGetHandleVerifier [0x0x7ff7b6a4730e+186766]\nE       \tGetHandleVerifier [0x0x7ff7b6a4eb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff7b6a359b4+114740]\nE       \tGetHandleVerifier [0x0x7ff7b6a35b69+115177]\nE       \tGetHandleVerifier [0x0x7ff7b6a1c368+10728]\nE       \tBaseThreadInitThunk [0x0x7ffe7a7553e0+16]\nE       \tRtlUserThreadStart [0x0x7ffe7b70485b+43]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "\n    登录功能自动化测试\n    :param driver: 浏览器驱动\n    :param account: 测试账号\n    :param password: 测试密码\n    :param should_pass: 是否应登录成功\n    ", "parameters": [{"name": "account", "value": "'textq@q.com'"}, {"name": "password", "value": "'abc123'"}, {"name": "should_pass", "value": "False"}], "start": 1751457491499, "stop": 1751457493436, "uuid": "2e4def7d-3755-4fd3-8dd7-15726f017bec", "historyId": "917b40b1d8fa32c66b71310d6e93c9ea", "testCaseId": "69c09a16f23890ca557733ad87499d37", "fullName": "testcases.test_login#test_login", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "DESKTOP-CGD749C"}, {"name": "thread", "value": "26376-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_login"}]}